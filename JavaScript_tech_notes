============================JavaScript Tech Notes=========================
1-HTML to define the content of web pages
2-CSS to specify the layout of web pages
3-JavaScript to program the behavior of web pages

Introduction:
=> JavaScript is the default scripting language in HTML
=> JavaScript can change the HTML content
=> JavaScript can change HTML attribute values
=> JavaScript can change HTML styles (CSS)
=> JavaScript can hide HTML elements

In HTML, JavaScript code must be inserted between <script> and </script> tags.

External JavaScript codes:
=> the file extension is ".js"
Placing scripts in eternal files has some advantages:
=> It seperates HTML and code
=> It makes HTML and JavaScript easier to read and maintain
=> Cached JavaScript files can speed up page loads.

JS Output:
JavaScript can display data in different ways:
=> inner HTML
=> document.write()  --> !! using document.write() after an HTML document is loaded, will delete all existing HTML.!! The document.write() method should only be used for testing.
=> window.alert()
=> console.log()

JavaScript Statements: 
=> In HTML, JavaScript programs are executed by the web browser.
=> JavaScript identifiers are case-sensitive.

<p id="demo"></p> 
<script>
var x, y, z;  // Statement 1
x = 7;    // Statement 2
y = 6;    // Statement 3
z = x + y;  // Statement 4 
document.getElementById("demo").innerHTML =
"The value of z is " + z + ".";  
</script> 

JavaScript Arithmetic:
** : x ** y produces the same result as Math.pow(x,y)
===   and !== : Strict equal and unequal operand.

JavaScript Datatypes:

var length = 16;                               // Number
var lastName = "Akarsu";                // String
var person = {firstName:"Cngz", lastName:"Krs", age:30, eyeColor:"green"};    // Object

=> JavaScript types are dynamic:
var x;           // Now x is undefined
x = 5;           // Now x is a Number
x = "Cngz";      // Now x is a String

=> JavaScript arrays:
var cars = ["Audi", "Volvo", "Mercedes"];

=> typeof operator:
typeof("hi")  //returns string.
typeof(3+8)   //returns number.
typeof true   //returns boolean
typeof {name:Cngz, age:34} // Returns "object"
typeof [1,2,3,4]             // Returns "object" (the typeof operator returns "object" for arrays because in JavaScript arrays are objects.)
typeof null                  // Returns "object"
typeof function myFunc(){}   // Returns "function"

=> Undefined variable:
var car= undefined;  // Value is undefined
typeof(car);         // Type is undefined

=> A method is a function stored as a property:
var person = {
  firstName: "Cngz",
  lastName : "Krs",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

DO NOT declare strings, numbers, and booleans as objects! They complicate your code and slow down execution speed.
var x = new String();        // Declares x as a String object
var y = new Number();        // Declares y as a Number object
var z = new Boolean();       // Declares z as a Boolean object


JavaScript Events:
=> the code changes the content of its own element (using this.innerHTML)
<button onclick="this.innerHTML">Click here</button>

Common HTML Events: 
onchange	An HTML element has been changed
onclick	    The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	    The browser has finished loading the page

=> The two methods are NOT equal. These are the differences:
The search() method cannot take a second start position argument.
The indexOf() method cannot take powerful search values (regular expressions).

=> There are 3 methods for extracting a part of a string: 
slice(start, end)
substring(start, end)
substr(start, length)
toUpperCase()
toLowerCase()
trim()
charAt(position)
charCodeAt(position)  -- The charCodeAt() method returns the unicode of the character at a specified index in a string.
split()
var x = Number.MIN_VALUE;
var x = Number.MAX_VALUE;
var x = Number.POSITIVE_INFINITY;
var x = Number.NEGATIVE_INFINITY;

toFixed() returns a string, with the number written with a specified number of decimals. // toFixed(2) is perfect for working with money.
var x = 9.656;
x.toFixed(0);           // returns 10
x.toFixed(2);           // returns 9.66
x.toFixed(4);           // returns 9.6560
x.toFixed(6);           // returns 9.656000

toPrecision() returns a string, with a number written with a specified length
var x = 9.656;
x.toPrecision();        // returns 9.656
x.toPrecision(2);       // returns 9.7
x.toPrecision(4);       // returns 9.656
x.toPrecision(6);       // returns 9.65600

parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned
parseInt("10");         // returns 10
parseInt("10.33");      // returns 10
parseInt("10 20 30");   // returns 10
parseInt("10 years");   // returns 10
parseInt("years 10");   // returns NaN  means (Not a Number)

parseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned
parseFloat("10");        // returns 10
parseFloat("10.33");     // returns 10.33
parseFloat("10 20 30");  // returns 10
parseFloat("10 years");  // returns 10
parseFloat("years 10");  // returns NaN

replace():   --- The replace() method does not change the string it is called on. It returns a new string.
str = "Please visit Microsoft!";
var n = str.replace("Microsoft", "W3Schools"); 

concat()
var text = "Hello" + " " + "World!";
var text = "Hello".concat(" ", "World!");

JavaScript Array Elements:
=> for loop
=> forEach() loop
=> for (;cars[i];) {} == while (cars[i]) {}
  
=> The shift() method removes the first array element and "shifts" all other elements to a lower index.  
=> The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements
=> The pop() method removes the last element from an array.  
=> The easiest way to add a new element to an array is using the push() method: 
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Lemon");    // adds a new element (Lemon) to fruits

=> With clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array
fruits.splice(2, 2, "Lemon", "Kiwi");
fruits.splice(0, 1);        // Removes the first element of fruits

=> The concat() method creates a new array by merging (concatenating) existing arrays

=> Avoid new Array() --- There is no need to use the JavaScript's built-in array constructor new Array().
var points = new Array();     // Bad
var points = [];              // Good 
--
var points = new Array(40, 100, 1, 5, 25, 10); // Bad
var points = [40, 100, 1, 5, 25, 10];          // Good

=> Array.isArray(fruits);   // returns true

=> The sort() method sorts an array alphabetically..   ||  The reverse() method reverses the elements in an array.
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();        // First sort the elements of fruits 
fruits.reverse();     // Then reverse the order of the elements

=> The join() method also joins all array elements into a string:
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * "); -- The result: Banana * Orange * Apple * Mango

The Compare Function: function(a, b){return a-b}

JavaScript Date:
getFullYear()	Get the year as a four digit number (yyyy)
getMonth()	Get the month as a number (0-11)
getDate()	Get the day as a number (1-31)
getHours()	Get the hour (0-23)
getMinutes()	Get the minute (0-59)
getSeconds()	Get the second (0-59)
getMilliseconds()	Get the millisecond (0-999)
getTime()	Get the time (milliseconds since January 1, 1970)
getDay()	Get the weekday as a number (0-6)
Date.now()	Get the time. ECMAScript 5.

JavaScript Set Date Methods:
setDate()	Set the day as a number (1-31)
setFullYear()	Set the year (optionally month and day)
setHours()	Set the hour (0-23)
setMilliseconds()	Set the milliseconds (0-999)
setMinutes()	Set the minutes (0-59)
setMonth()	Set the month (0-11)
setSeconds()	Set the seconds (0-59)
setTime()	Set the time (milliseconds since January 1, 1970)

 NaN: Not a number
JavaScript Data Types:
=> In JavaScript, there are 5 different data types that can contain values:
string
number
boolean
object
function

=> There are 3 types of objects:
Object
Date
Array

=> 2 data types that cannot contain values:
null 
undefined

=> The constructor property returns the constructor function for all JavaScript variables.
"Cngz".constructor                // Returns function String()  {[native code]}
(3.14).constructor                // Returns function Number()  {[native code]}
false.constructor                 // Returns function Boolean() {[native code]}
[1,2,3,4].constructor             // Returns function Array()   {[native code]}
{name:Cngz,age:34}.constructor  // Returns function Object()  {[native code]}
new Date().constructor            // Returns function Date()    {[native code]}
function () {}.constructor        // Returns function Function(){[native code]}

function isArray(myArray) {
  return myArray.constructor === Array;
}

function isDate(myDate) {
  return myDate.constructor === Date;
}

Converting:
=> String(100 + 23)         // returns "123"
=> (100 + 23).toString()  // returns "123"
=> Number("3.14")    // returns 3.14

=> The unary + operator can be used to convert a variable to a number:
var y = "5";      // y is a string
var x = + y;      // x is a number
=> If the variable cannot be converted, it will still become a number, but with the value NaN (Not a Number):
var y = "Cngz";   // y is a string
var x = + y;      // x is a number (NaN)

Use String replace() With a Regular Expression
var str = "Visit Microsoft!";
var res = str.replace(/microsoft/i, "W3Schools");  --- "i"  is a modifier (modifies the search to be case-insensitive)
--- The result:  Visit W3Schools!

HTML Validation:
=> Modern browsers will often use a combination of JavaScript and built-in HTML validation, using predefined validation rules defined in HTML attributes:
<input id="demo" type="number" min="5" max="10" step="1">

ECMAScript 2015:  ES2015 introduced two important new JavaScript keywords: let and const.
=> Variables declared with the var keyword can not have Block Scope.
Example-1:
var x = 10;
// Here x is 10
{ 
  var x = 2;
  // Here x is 2
}
// Here x is 2
---
Example-2:
var i = 5;
for (var i = 0; i < 10; i++) {
  // some statements
}
// Here i is 10

=> Variables declared with the let keyword can have Block Scope.
Example-1:
var x = 10;
// Here x is 10
{ 
  let x = 2;
  // Here x is 2
}
// Here x is 10
---
Example-2:
let i = 5;
for (let i = 0; i < 10; i++) {
  // some statements
}
// Here i is 5

=> Variables declared with var and let are quite similar when declared inside a function:
function myFunction() {
  var carName = "Volvo";   // Function Scope
}
function myFunction() {
  let carName = "Volvo";   // Function Scope
}

=> Variables declared with var and let are quite similar when declared outside a block:
var x = 2;       // Global scope
let x = 2;        // Global scope

=> Hoisting: 
var carName;  // you CAN use carName here 
let carName;  // you can NOT use carName here

JavaScript Best Practices:

Initialize Variables
=> It is a good coding practice to initialize variables when you declare them.
// Declare and initiate at the beginning
var firstName = "",
lastName = "",
price = 0,
discount = 0,
fullPrice = 0,
myArray = [],
myObject = {};

Don't Use new Object()
Use {} instead of new Object()
Use "" instead of new String()
Use 0 instead of new Number()
Use false instead of new Boolean()
Use [] instead of new Array()
Use /()/ instead of new RegExp()
Use function (){} instead of new Function()

var x1 = {};           // new object
var x2 = "";           // new primitive string
var x3 = 0;            // new primitive number
var x4 = false;        // new primitive boolean
var x5 = [];           // new array object
var x6 = /()/;         // new regexp object
var x7 = function(){}; // new function object

Never Declare Number, String, or Boolean Objects
var x = "Cngz";             
var y = new String("Cngz");
(x === y) // is false because x is a string and y is an object.

Beware of Automatic Type Conversions
=> Beware that numbers can accidentally be converted to strings or NaN (Not a Number).
var x = "Hello";     // typeof x is a string
x = 5;               // changes typeof x to a number

Undefined is Not Null
you cannot test if an object is null, because this will throw an error if the object is undefined
if (myObj !== null && typeof myObj !== "undefined")   // incorrect
if (typeof myObj !== "undefined" && myObj !== null)   // correct

JavaScript Reserved Words: https://www.w3schools.com/js/js_reserved.asp

JavaScript JSON (JavaScript Object Notation)
JSON is a format for storing and transportng data.
JSON is often used when data is sent from a server to a web page.

=> The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. Code for reading and generating JSON data can be written
 in any programming language.
 => The JSON format is syntactically identical to the code for creating JavaScript objects. Because of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects.
 
 => JavaScript built-in function JSON.parse() to convert the string into a JavaScript object:
 var obj = JSON.parse(text);
 
JavaScript Validation API -  Constraint Validation DOM Methods
=>checkValidity()	Returns true if an input element contains valid data.

<script>
function myFunction() {
  var inpObj = document.getElementById("id1");
  if (!inpObj.checkValidity()) {
    document.getElementById("demo").innerHTML = inpObj.validationMessage;
  }
}
</script>
 
=> setCustomValidity()	Sets the validationMessage property of an input element.

Validity Properties
=> The validity property of an input element contains a number of properties related to the validity of data:
customError	Set to true, if a custom validity message is set.
patternMismatch	Set to true, if an element's value does not match its pattern attribute.
rangeOverflow	Set to true, if an element's value is greater than its max attribute.
rangeUnderflow	Set to true, if an element's value is less than its min attribute.
stepMismatch	Set to true, if an element's value is invalid per its step attribute.
tooLong	Set to true, if an element's value exceeds its maxLength attribute.
typeMismatch	Set to true, if an element's value is invalid per its type attribute.
valueMissing	Set to true, if an element (with a required attribute) has no value.
valid	Set to true, if an element's value is valid.

<input id="id1" type="number" max="100">
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
  var txt = "";
  if (document.getElementById("id1").validity.rangeOverflow) {
    txt = "Value too large";
  }
  document.getElementById("demo").innerHTML = txt;
}
</script>

JavaScript Properties
=> JavaScript for...in Loop:
var person = {fname:"Cngz", lname:"Krs", age:25}; 

for (x in person) {
  txt += person[x];
}

=> Deleting Properties:
var person = {firstName:"Cngz", lastName:"Krs", age:50, eyeColor:"blue"};
delete person.age;   // or delete person["age"]; 

The delete keyword deletes both the value of the property and the property itself. 
After deletion, the property cannot be used before it is added back again. 
The delete operator is designed to be used on object properties. It has no effect on variables or functions. 
The delete operator should not be used on predefined JavaScript object properties. It can crash your application.

// Create an object:
var insan= {
  isim:"Cngz",
  soyisim:"Krs",
  yas:30,
  fullName: function(){
  	return this.isim+"-"+this.soyisim;
  }
};

JavaScript Accessors (Getters and Setters)
=> JavaScript Getter
// Create an object:
var person = {
  firstName: "Cngz",
  lastName : "Krs",
  language : "en",
  get lang() {
    return this.language;
  }
};

// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.lang;

=> JavaScript Setter
var person = {
  firstName: "Cngz",
  lastName : "Krs",
  language : "",
  set lang(lang) {
    this.language = lang;
  }
};

// Set an object property using a setter:
person.lang = "en";

// Display data from the object:
document.getElementById("demo").innerHTML = person.language;

Using the prototype Property
=> The JavaScript prototype property allows you to add new properties to object constructors:
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.nationality = "English";

=> The JavaScript prototype property also allows you to add new methods to objects constructors:
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.name = function() {
  return this.firstName + " " + this.lastName;
};

NOTE:Only modify your own prototypes. Never modify the prototypes of standard JavaScript objects!

The JavaScript call() Method
var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}
var person1 = {
  firstName:"Cngz",
  lastName: "Krs",
}
person.fullName.call(person1, "Oslo", "Norway");

The JavaScript apply() Method:  The apply() method is similar to the call() method:
var person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person1 = {
  firstName: "Can",
  lastName: "Krs",
}
person.fullName.apply(person1);  // Will return "Can Krs"

The Difference Between call() and apply()
=> The call() method takes arguments separately.
=> The apply() method takes arguments as an array.













